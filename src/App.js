// Importing all the requried libraties and modules
import React, { Component, useState } from "react";
import "./App.css";
import "bootstrap/dist/css/bootstrap.css";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import {
  numbers,
  upperCaseLetters,
  lowerCaseLetters,
  specailcharacters,
} from "./characters";
import { copy_success, copy_failure } from "./message";

// Function component for the Password Generator App
const App = () => {
  // State variables to manage password generation and user selections
  // Here we are getting and setting the properties/states of all the variables
  const [password, setpassword] = useState(""); //password
  const [passwordLength, setPasswordLength] = useState(26); //password length
  const [includeNumbers, setIncludeNumbers] = useState(false); //numbers
  const [includeUppercaseLetters, setIncludeUppercaseLetters] = useState(false); //upper case letters
  const [includeLowercaseLetters, setIncludeLowercaseLetters] = useState(false); //lower case letters
  const [includeSpecialCharacters, setIncludeSpecialCharacters] =
    useState(false); //special characters

  
  // Function will check the password length and type of characters password should include
  const handleGeneratePassword = () => {
    // Checking the password length
    if (passwordLength > 26 || passwordLength < 8) {
      notify(
        "Password length must be between 8 and 26 to create a strong password",
        true
      );
    } else {
      // If no characters types is selected then a notification will br given to the user to select any of the characters type
      if (
        !includeNumbers &&
        !includeUppercaseLetters &&
        !includeLowercaseLetters &&
        !includeSpecialCharacters
      ) {
        notify(
          "To generate password you must select atleast one checkbox",
          true
        );
      } else {
        // Generating a string containing all characters of users choice 
        let characterList = "";
        if (includeNumbers) {
          characterList += numbers;
        }
        if (includeUppercaseLetters) {
          characterList += upperCaseLetters;
        }
        if (includeLowercaseLetters) {
          characterList += lowerCaseLetters;
        }
        if (includeSpecialCharacters) {
          characterList += specailcharacters;
        }
        // Setting the password that is generated by the createpassword() function which takes characterlist as input argument
        setpassword(createPassword(characterList));
        notify("Password generated successfully!", false);
      }
    }
  };

  // Function to generate a random password based on user selections
  // with the given password length and character list and returns the password
  const createPassword = (characterList) => {
    let password = "";
    const characterListLength = characterList.length;
    for (let i = 0; i <= passwordLength; i++) {
      // Selecting the random character index from the character list
      const characterIndex = Math.round(Math.random() * characterListLength);

      // Adding the character at that index to the password
      password += characterList.charAt(characterIndex); 

    }
    return password;
  };

  // Function to copy to clipboard
  const copytoclipboard = (password) => {
    navigator.clipboard.writeText(password);
  };

  // Function to copy the generated password to the clipboard
  const handleCopyPassword = () => {
    if (password === "") {
      //checking if the password is empty
      notify(copy_failure, true);
    } 
    else {
      // Calling the copytoclipboard() function to copy the password
      copytoclipboard(password); 
      notify(copy_success, false);
    }
  };

  // Function to show a notification message using react-toastify
  const notify = (message, hasError = false) => {
    if (hasError) {
      toast.error(message, {
        position: "top-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    } else {
      toast(message, {
        position: "top-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    }
  };

  // Returning the app to the main root
  return (
    <div className="App">
      <div className="Container m-2">
        <div className="Password-generator m-2">
          <h2 className="generator-header m-2">PasswordGenerator</h2>

          {/* Displaying the password and copy to clipboard symbols in the app */}
          <div className="generator-password">
            <h3>{password}</h3>
            <button className="copy__btn">
              <i onClick={handleCopyPassword} className="far fa-clipboard"></i>
            </button>
          </div>

          {/* Taking the input from user to generate the password of user's choice */}
          <div className="generator m-2">
            {/* Input password length in number type */}
            <div className="form-group m-2">
              <label htmlFor="password-length">Password Length</label>
              <input
                type="number"
                defaultValue={passwordLength}
                onChange={(e) => setPasswordLength(e.target.value)}
                className="passwordlength m-2"
                name="Password-length"
                htmlFor="password-length"
                min={8}
                max={26}
              ></input>
            </div>

            {/* Input in the checkbox */}
            {/* Input if numbers should be included in the password */}
            <div className="form-group m-2">
              <label htmlFor="numbers">Numbers</label>
              <input
                checked={includeNumbers}
                onChange={(e) => setIncludeNumbers(e.target.checked)}
                type="checkbox"
                className="password m-2"
                name="numbers"
                htmlFor="numbers"
              ></input>
            </div>

            {/* Input if upper case letters should be included in the password  */}
            <div className="form-group m-2">
              <label htmlFor="uppercaseletters">Uppercase Letters</label>
              <input
                checked={includeUppercaseLetters}
                onChange={(e) => setIncludeUppercaseLetters(e.target.checked)}
                type="checkbox"
                className="password m-2"
                name="uppercaseletters"
                htmlFor="uppercaseletters"
              ></input>
            </div>

            {/* Input if lower case letters should be included in the password  */}
            <div className="form-group m-2">
              <label htmlFor="includelowercaseletters">Lowercase Letters</label>
              <input
                checked={includeLowercaseLetters}
                onChange={(e) => setIncludeLowercaseLetters(e.target.checked)}
                type="checkbox"
                className="password m-2"
                name="lowercaseletters"
                htmlFor="lowercaseletters"
              ></input>
            </div>

            {/* Input if special characters should be included in the password  */}
            <div className="form-group m-2">
              <label htmlFor="symbols">Special characters</label>
              <input
                checked={includeSpecialCharacters}
                onChange={(e) => setIncludeSpecialCharacters(e.target.checked)}
                type="checkbox"
                className="password m-2"
                name="symbols"
                htmlFor="symbols"
              ></input>
            </div>

            {/* A button to submit the choice of the user i.e length and characters to be included */}
            <div className="form-group  m-2">
              <button onClick={handleGeneratePassword} className="generate-btn">
                Generate
              </button>
            </div>

            {/* Code for the notification that the user recieves */}
            <ToastContainer
              position="top-center"
              autoClose={5000}
              hideProgressBar={false}
              newestOnTop={false}
              closeOnClick
              rtl={false}
              pauseOnFocusLoss
              draggable
              pauseOnHover
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
